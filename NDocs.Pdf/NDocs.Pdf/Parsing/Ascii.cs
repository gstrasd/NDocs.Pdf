using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NDocs.Pdf.Parsing
{
    public static class Ascii
    {
        public const byte Null = 0x00;
        public const byte StartOfHeading = 0x01;
        public const byte StartOfText = 0x02;
        public const byte EndOfText = 0x03;
        public const byte EndOfTransmission = 0x04;
        public const byte Enquiry = 0x05;
        public const byte Acknowledge = 0x06;
        public const byte Bell = 0x07;
        public const byte Backspace = 0x08;
        public const byte HorizontalTab = 0x09;
        public const byte LineFeed = 0x0A;
        public const byte VerticalTab = 0x0B;
        public const byte FormFeed = 0x0C;
        public const byte CarriageReturn = 0x0D;
        public const byte ShiftOut = 0x0E;
        public const byte ShiftIn = 0x0F;
        public const byte DataLinkEscape = 0x10;
        public const byte DeviceControl1 = 0x11;
        public const byte DeviceControl2 = 0x12;
        public const byte DeviceControl3 = 0x13;
        public const byte DeviceControl4 = 0x14;
        public const byte NegativeAcknowledge = 0x15;
        public const byte SynchronousIdle = 0x16;
        public const byte EndOfTransmissionBlock = 0x17;
        public const byte Cancel = 0x18;
        public const byte EndOfMedium = 0x19;
        public const byte Substitute = 0x1A;
        public const byte Escape = 0x1B;
        public const byte FileSeparator = 0x1C;
        public const byte GroupSeparator = 0x1D;
        public const byte RecordSeparator = 0x1E;
        public const byte UnitSeparator = 0x1F;
        public const byte Space = 0x20;
        public const byte ExclamationMark = 0x21;
        public const byte QuotationMark = 0x22;
        public const byte NumberSign = 0x23;
        public const byte DollarSign = 0x24;
        public const byte PercentSign = 0x25;
        public const byte Ampersand = 0x26;
        public const byte Apostrophe = 0x27;
        public const byte LeftParenthesis = 0x28;
        public const byte RightParenthesis = 0x29;
        public const byte Asterisk = 0x2A;
        public const byte PlusSign = 0x2B;
        public const byte Comma = 0x2C;
        public const byte MinusSign = 0x2D;
        public const byte Period = 0x2E;
        public const byte ForwardSlash = 0x2F;
        public const byte Digit0 = 0x30;
        public const byte Digit1 = 0x31;
        public const byte Digit2 = 0x32;
        public const byte Digit3 = 0x33;
        public const byte Digit4 = 0x34;
        public const byte Digit5 = 0x35;
        public const byte Digit6 = 0x36;
        public const byte Digit7 = 0x37;
        public const byte Digit8 = 0x38;
        public const byte Digit9 = 0x39;
        public const byte Colon = 0x3A;
        public const byte Semicolon = 0x3B;
        public const byte LessThanSign = 0x3C;
        public const byte EqualSign = 0x3D;
        public const byte GreaterThanSign = 0x3E;
        public const byte QuestionMark = 0x3F;
        public const byte AtSign = 0x40;
        public const byte A = 0x41;
        public const byte B = 0x42;
        public const byte C = 0x43;
        public const byte D = 0x44;
        public const byte E = 0x45;
        public const byte F = 0x46;
        public const byte G = 0x47;
        public const byte H = 0x48;
        public const byte I = 0x49;
        public const byte J = 0x4A;
        public const byte K = 0x4B;
        public const byte L = 0x4C;
        public const byte M = 0x4D;
        public const byte N = 0x4E;
        public const byte O = 0x4F;
        public const byte P = 0x50;
        public const byte Q = 0x51;
        public const byte R = 0x52;
        public const byte S = 0x53;
        public const byte T = 0x54;
        public const byte U = 0x55;
        public const byte V = 0x56;
        public const byte W = 0x57;
        public const byte X = 0x58;
        public const byte Y = 0x59;
        public const byte Z = 0x5A;
        public const byte LeftSquareBracket = 0x5B;
        public const byte Backslash = 0x5C;
        public const byte RightSquareBracket = 0x5D;
        public const byte CircumflexAccent = 0x5E;
        public const byte Underscore = 0x5F;
        public const byte GraveAccent = 0x60;
        public const byte LowercaseA = 0x61;
        public const byte LowercaseB = 0x62;
        public const byte LowercaseC = 0x63;
        public const byte LowercaseD = 0x64;
        public const byte LowercaseE = 0x65;
        public const byte LowercaseF = 0x66;
        public const byte LowercaseG = 0x67;
        public const byte LowercaseH = 0x68;
        public const byte LowercaseI = 0x69;
        public const byte LowercaseJ = 0x6A;
        public const byte LowercaseK = 0x6B;
        public const byte LowercaseL = 0x6C;
        public const byte LowercaseM = 0x6D;
        public const byte LowercaseN = 0x6E;
        public const byte LowercaseO = 0x6F;
        public const byte LowercaseP = 0x70;
        public const byte LowercaseQ = 0x71;
        public const byte LowercaseR = 0x72;
        public const byte LowercaseS = 0x73;
        public const byte LowercaseT = 0x74;
        public const byte LowercaseU = 0x75;
        public const byte LowercaseV = 0x76;
        public const byte LowercaseW = 0x77;
        public const byte LowercaseX = 0x78;
        public const byte LowercaseY = 0x79;
        public const byte LowercaseZ = 0x7A;
        public const byte LeftCurlyBracket = 0x7B;
        public const byte VerticalBar = 0x7C;
        public const byte RightCurlyBracket = 0x7D;
        public const byte Tilde = 0x7E;
        public const byte Delete = 0x7F;
        public static readonly byte[] EndOfLine = { CarriageReturn, LineFeed };
        public static readonly byte[] Whitespace = { Null, HorizontalTab, LineFeed, FormFeed, CarriageReturn, Space };
        public static readonly byte[] Delimiters = { LeftParenthesis, RightParenthesis, LessThanSign, GreaterThanSign, LeftSquareBracket, RightSquareBracket, LeftCurlyBracket, RightCurlyBracket, ForwardSlash, PercentSign };
        public static readonly byte[] WhitespaceAndDelimiters = { Null, HorizontalTab, LineFeed, FormFeed, CarriageReturn, Space, LeftParenthesis, RightParenthesis, LessThanSign, GreaterThanSign, LeftSquareBracket, RightSquareBracket, LeftCurlyBracket, RightCurlyBracket, ForwardSlash, PercentSign };
        public static readonly byte[] Integers = { Digit0, Digit1, Digit2, Digit3, Digit4, Digit5, Digit6, Digit7, Digit8, Digit9 };
    }
}
